<?xml version="1.0"?>
<Graphs xmlns="https://poets-project.org/schemas/virtual-graph-schema-v2">
    <GraphType id="ro">
        <Documentation>TODO</Documentation>
        <MetaData>&quot;native_dimension&quot;:2</MetaData>
        <Properties/>

        <MessageTypes>

            <MessageType id="__init__">
                <Documentation>Initialize state</Documentation>
            </MessageType>

            <MessageType id="toggle">
                <Message>
                </Message>
                <Documentation>Trigger next node to toggle state</Documentation>
            </MessageType>

        </MessageTypes>

        <DeviceTypes>
            <DeviceType id="node">

                <State>
                    <Scalar name="state" type="uint32_t"/>
                    <Scalar name="counter" type="uint32_t"/>
                    <Scalar name="rts" type="uint32_t"/>
                </State>

                <Properties>
                    <Scalar name="id" type="uint32_t"/>
                </Properties>

                <ReadyToSend>
                    <![CDATA[
                    *readyToSend = deviceState->rts;
                    ]]>
                </ReadyToSend>

                <InputPin messageTypeId="__init__" name="__init__">
                    <OnReceive>
                        <![CDATA[

                        deviceState->state = 0;
                        deviceState->counter = 0;

                        if (deviceProperties->id == 0) {
                            handler_log(2, "Start");
                            deviceState->rts = 1;
                        }
                        ]]>
                    </OnReceive>
                </InputPin>

                <InputPin messageTypeId="toggle" name="in">
                    <OnReceive>
                        <![CDATA[

                        // Toggle state:
                        deviceState->state = 1 - deviceState->state;

                        // Increment counter:
                        (deviceState->counter)++;

                        // Queue message for delivery if either:
                        //   A. node is not root (id != 1)
                        //   B. (node is root but) total messages delivered are less than a certain constant

                        if (deviceProperties->id == 0) {

                            // starting node propagates a fixed number of messages

                            handler_log(2, "Cycle %d", deviceState->counter);

                            if (deviceState->counter < 1000)
                                deviceState->rts = 1; // queue next message
                            else
                                handler_log(2, "Finish");

                        } else {

                            // non-starting nodes always propagate incoming messages

                            deviceState->rts = 1;

                        }

                        ]]>
                    </OnReceive>
                </InputPin>

                <OutputPin messageTypeId="toggle" name="out">
                    <OnSend>
                        <![CDATA[

                        deviceState->rts = 0;

                        ]]>
                    </OnSend>
                </OutputPin>

            </DeviceType>

        </DeviceTypes>
    </GraphType>
    <GraphInstance id="graph1" graphTypeId="ro">
      <DeviceInstances>
        {%- for node in node_info %}
        <DevI id="{{ node.name }}" type="node"><P>"id": {{ node.index }}</P></DevI>
        {%- endfor %}
      </DeviceInstances>
      <EdgeInstances>
        {%- for src, dst in edges %}
        <EdgeI path="{{ src }}:in-{{ dst }}:out"/>
        {%- endfor %}
      </EdgeInstances>
    </GraphInstance>
</Graphs>
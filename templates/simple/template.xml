{% set software_buffer_size = params.get('sbufsize', 1000) -%}

<?xml version="1.0"?>
<Graphs xmlns="https://poets-project.org/schemas/virtual-graph-schema-v2">
    <GraphType id="{{ type }}">
        <Documentation>{{ doc }}</Documentation>
        <MetaData>&quot;native_dimension&quot;:2</MetaData>
        <Properties/>

        <SharedCode><![CDATA[

{{ include('shared.c') }}

{{ include_app('shared.c', optional=True) }}

        ]]></SharedCode>

        <MessageTypes>

            <MessageType id="__init__">
                <Documentation>Initialize state</Documentation>
            </MessageType>

            {% for id, content in messages.items() %}
            <MessageType id="{{ id }}">
                <Documentation>{{ content['doc'] }}</Documentation>
                <Message>
                    <Scalar type="uint32_t" name="src">
                        <Documentation>
                            Source node id
                        </Documentation>
                    </Scalar>
                    <Scalar type="uint32_t" name="dst">
                        <Documentation>
                            Destination node id
                        </Documentation>
                    </Scalar>
                    {%- set field_items = content.get('fields', {}).items() %}
                    {%- for fd_id, fd_content in field_items %}
                    {%- set fd_type = fd_content.get('type', 'uint32_t') %}
                    <Scalar type="{{ fd_type }}" name="{{ fd_id }}">
                        {%- if 'doc' in fd_content %}
                        <Documentation>
                            {{ fd_content['doc'] }}
                        </Documentation>
                        {%- endif %}
                    </Scalar>
                    {%- endfor %}
                </Message>
            </MessageType>
            {% endfor %}
        </MessageTypes>

        <DeviceTypes>
            <!-- Generated Block -->
            <DeviceType id="{{ device.get('name', 'node') }}">
                <Properties>
                    <Scalar name="id" type="uint32_t"></Scalar>
                    <Scalar name="outdegree" type="uint32_t"></Scalar>
                    {%- set property_items = device.get('properties', {}).items() %}
                    {%- for p_id, p_content in property_items %}
                    {%- set p_type = p_content.get('type', 'uint32_t') -%}
                    {%- set p_length = get_field_length(p_content) -%}
                    {%- set is_array = p_length > 1 -%}
                    {%- if is_array %}
                    <Array name="{{ p_id }}" type="{{ p_type }}" length="{{ p_length }}"></Array>
                    {%- else %}
                    <Scalar name="{{ p_id }}" type="{{ p_type }}"></Scalar>
                    {%- endif %}
                    {%- endfor %}
                </Properties>

                <State>

                    <!-- Device state fields: -->
                    {% for s_id, s_content in device['state'].items() %}
                    {%- set p_type = s_content.get('type', 'uint32_t') -%}
                    {%- set s_length = get_field_length(s_content) -%}
                    {%- set is_array = s_length > 1 -%}
                    {%- if is_array %}
                    <Array name="{{ s_id }}" type="{{ p_type }}" length="{{ s_length }}"></Array>
                    {%- else %}
                    <Scalar name="{{ s_id }}" type="{{ p_type }}"></Scalar>
                    {%- endif %}
                    {%- endfor %}

                    {% for id, content in messages.items() %}
                    <!-- Software buffer for (outgoing) {{ id }} messages: -->

                    <Array name="{{ id }}_buffer_dst" type="uint32_t" length="{{ software_buffer_size }}"></Array>
                    <Scalar name="{{ id }}_buffer_ptr" type="uint32_t"></Scalar>
                    {%- set field_items = content.get('fields', {}).items() %}
                    {%- for fd_id, fd_content in field_items %}
                    <Array name="{{ id }}_buffer_{{ fd_id }}" type="{{ fd_content.get('type', 'uint32_t') }}" length="{{ software_buffer_size }}"></Array>
                    {%- endfor %}
                    {% endfor %}

                </State>

                <ReadyToSend>
                    <![CDATA[

{{ include('ready_to_send.c') }}

                    ]]>
                </ReadyToSend>

                <InputPin messageTypeId="__init__" name="__init__">
                    <OnReceive>
                        <![CDATA[

{{ include_app('init.c', optional=True) }}

                        ]]>
                    </OnReceive>
                </InputPin>

                {% for msg, content in messages.items() %}

                <InputPin messageTypeId="{{ msg }}" name="{{ msg }}_in">
                    <OnReceive>
                        <![CDATA[

{{ include_app('receive_%s.c' % msg) }}

                        ]]>
                    </OnReceive>
                </InputPin>

                <OutputPin messageTypeId="{{ msg }}" name="{{ msg }}_out">
                    <OnSend>
                        <![CDATA[

{{ include('send_handler.c', msg=msg, fields=content.get('fields', {} )) }}

                        ]]>
                    </OnSend>
                </OutputPin>

                {% endfor %}

            </DeviceType>

        </DeviceTypes>
    </GraphType>
    <GraphInstance id="graph1" graphTypeId="{{ type }}">
      <DeviceInstances>
          {%- for node in graph.nodes %}
          <DevI id="{{ node }}" type="node">
            <P>"id": {{ loop.index0 }}, "outdegree": {{ graph.get_outdegree(node) }}</P>
          </DevI>
          {%- endfor %}
      </DeviceInstances>
      <EdgeInstances>
        {%- for src, dst in graph.get_edge_list() %}
          {%- for msg in messages.keys() %}
          <EdgeI path="{{ dst }}:{{ msg }}_in-{{ src }}:{{ msg }}_out"/>
          {%- endfor %}
        {%- endfor %}
      </EdgeInstances>
    </GraphInstance>
</Graphs>

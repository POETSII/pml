<?xml version='1.0' encoding='ASCII'?>
<Graphs xmlns="https://poets-project.org/schemas/virtual-graph-schema-v2">
    <GraphType id="fantasi">
        <MessageTypes>
            <MessageType id="__init__"/>
            <MessageType id="update">
                <Message>
                    <Scalar name="distance" type="uint32_t"/>
                </Message>
            </MessageType>
        </MessageTypes>
        <DeviceTypes>
            <DeviceType id="flipflop">
                <State>
                    <Scalar type="uint32_t" name="distance"/>
                </State>
                <InputPin name="__init__" messageTypeId="__init__">
                    <OnReceive>
                        <![CDATA[

                        deviceState->distance = 0xffffffff; // INT_MAX

                        ]]>
                    </OnReceive>
                </InputPin>
                <InputPin messageTypeId="update" name="in">
                    <OnReceive>
                        <![CDATA[

                        if (message->distance < deviceState->distance){
                        deviceState->distance = message->distance;
                        deviceState->rts = 1;
                        }

                        ]]>
                    </OnReceive>
                </InputPin>
                <OutputPin messageTypeId="update" name="out">
                    <OnSend>
                        <![CDATA[

                        deviceState->rts=0;
                        message->distance = deviceState->distance+1;

                        ]]>
                    </OnSend>
                </OutputPin>
                <ReadyToSend>
                    <![CDATA[

                    *readyToSend = deviceState->rts;

                    ]]>
                </ReadyToSend>
            </DeviceType>
        </DeviceTypes>
    </GraphType>
    <GraphInstance graphTypeId="fantasi" id="graph0">
    <DeviceInstances>{% for node in nodes %}
        <DevI type="flipflop" id="{{ node }}"/>{% endfor %}
    </DeviceInstances>
    <EdgeInstances>{% for src, dst in edges %}
        <EdgeI path="{{ src }}:in-n2:{{ dst }}"/>{% endfor %}
    </EdgeInstances>
</GraphInstance>
</Graphs>

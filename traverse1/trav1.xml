<?xml version="1.0"?>
<Graphs xmlns="https://poets-project.org/schemas/virtual-graph-schema-v2">
    <GraphType id="network">
        <Documentation>TODO</Documentation>
        <MetaData>&quot;native_dimension&quot;:2</MetaData>
        <Properties/>

        <MessageTypes>

            <MessageType id="__init__">
                <Documentation>Initialize state</Documentation>
            </MessageType>

            <MessageType id="req">
                <Message>
                    <Scalar type="uint32_t" name="src"><Documentation>Source node id</Documentation></Scalar>
                    <Scalar type="uint32_t" name="callback"><Documentation>Callback ticket number to quote when sending ack</Documentation></Scalar>
                    <Scalar type="uint32_t" name="iteration"><Documentation>Number of iteration the request belongs to</Documentation></Scalar>
                    <Scalar type="uint32_t" name="hoplimit"><Documentation>How many further steps to propagate request</Documentation></Scalar>
                </Message>
                <Documentation>Request to traverse surrounding nodes</Documentation>
            </MessageType>

            <MessageType id="ack">
                <Message>
                    <Scalar type="uint32_t" name="src"><Documentation>Source node id</Documentation></Scalar>
                    <Scalar type="uint32_t" name="dst"><Documentation>Destination node id</Documentation></Scalar>
                    <Scalar type="uint32_t" name="callback"><Documentation>Callback ticket number</Documentation></Scalar>
                    <Scalar type="uint32_t" name="discovered"><Documentation>How many new nodes have been discovered</Documentation></Scalar>
                </Message>
                <Documentation>Acknowledge completion of a traversal request</Documentation>
            </MessageType>

        </MessageTypes>

        <DeviceTypes>
            <DeviceType id="node">

                <Properties>
                    <Scalar name="id" type="uint32_t"/>
                    <Scalar name="outdegree" type="uint32_t"/>
                </Properties>

                <State>
                    <Scalar name="req_counter" type="uint32_t"/>
                    <Array name="hoplimits" type="uint32_t" length="100"/>

                    <!--

                    Requests Table [requests_tbl] is a table of request
                    entries. Each entry consists of the fields:

                    - discovered_sum: sum of nodes discovered via this request (running sum).
                    - replies_received: number of ack messages received
                    - requester: id of requesting node
                    - callback: callback number to quote when sending ack to 'requester'

                    New entries are inserted on the first available slot in
                    the table (O(n) insertion, but will do for now). An
                    additional field 'occupied' indicates whether the slot is
                    used.

                     -->

                    <Array name="requests_tbl_occupied" type="uint32_t" length="1000"/>
                    <Array name="requests_tbl_discovered_sum" type="uint32_t" length="1000"/>
                    <Array name="requests_tbl_replies_received" type="uint32_t" length="1000"/>
                    <Array name="requests_tbl_requester" type="uint32_t" length="1000"/>
                    <Array name="requests_tbl_callback" type="uint32_t" length="1000"/>

                    <!--

                    Temporary variables to pass req message fields to rew
                    output handler:

                     -->

                    <Scalar name="msg_req_rts" type="uint32_t"/>
                    <Scalar name="msg_req_callback" type="int32_t"/>
                    <Scalar name="msg_req_iteration" type="uint32_t"/>
                    <Scalar name="msg_req_hoplimit" type="uint32_t"/>

                    <!--

                    Temporary variables to pass req message fields to ack
                    output handler:

                     -->

                    <Scalar name="msg_ack_rts" type="uint32_t"/>
                    <Scalar name="msg_ack_dst" type="uint32_t"/>
                    <Scalar name="msg_ack_callback" type="uint32_t"/>
                    <Scalar name="msg_ack_discovered" type="uint32_t"/>

                </State>

                <ReadyToSend>
                    <![CDATA[

{{ include_file('ready_to_send.c') }}

                    ]]>
                </ReadyToSend>

                <InputPin messageTypeId="__init__" name="__init__">
                    <OnReceive>
                        <![CDATA[

{{ include_file('init.c') }}

                        ]]>
                    </OnReceive>
                </InputPin>

                <InputPin messageTypeId="req" name="req_in">
                    <OnReceive>
                        <![CDATA[

{{ include_file('receive_req.c') }}

                        ]]>
                    </OnReceive>
                </InputPin>

                <InputPin messageTypeId="ack" name="ack_in">
                    <OnReceive>
                        <![CDATA[

{{ include_file('receive_ack.c') }}

                        ]]>
                    </OnReceive>
                </InputPin>

                <OutputPin messageTypeId="req" name="req_out">
                    <OnSend>
                        <![CDATA[

{{ include_file('send_req.c') }}

                        ]]>
                    </OnSend>
                </OutputPin>

                <OutputPin messageTypeId="ack" name="ack_out">
                    <OnSend>
                        <![CDATA[

{{ include_file('send_ack.c') }}

                        ]]>
                    </OnSend>
                </OutputPin>

            </DeviceType>

        </DeviceTypes>
    </GraphType>
    <GraphInstance id="graph1" graphTypeId="network">
      <DeviceInstances>
          {%- for index, node in graph.get_node_list() %}
          <DevI id="{{ node }}" type="node">
            <P>"id": {{ index }}, "outdegree": {{ graph.get_outdegree(node) }}</P>
          </DevI>
          {%- endfor %}
      </DeviceInstances>
      <EdgeInstances>
        {%- for src, dst in graph.get_edge_list() %}
          <!-- Connection {{src }} -> {{ dst }}  -->
          <EdgeI path="{{ dst }}:req_in-{{ src }}:req_out"/>
          <EdgeI path="{{ src }}:ack_in-{{ dst }}:ack_out"/>
        {%- endfor %}
      </EdgeInstances>
    </GraphInstance>
</Graphs>
